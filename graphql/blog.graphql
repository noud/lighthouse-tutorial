extend type Query {
    posts(first: Int!, page: Int): [Post!]! @paginate
    post(id: PostInput! @eq): Post @find
    authors: [User!]! @all(model: "App\\Models\\User")
}

type Post {
    id: ID!
    title: String!
    slug: String!
    content: String!
    coverImage: CoverImage! @belongsTo
    author: User! @belongsTo
    comments: [Comment!]! @hasMany
    dateAndTime: String @rename(attribute: "updated_at")
    updated_at: DateTime!
}

type CoverImage {
    id: ID!
    handle: String!
}

type Comment{
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

input PostInput {
    id: ID!
}

input CreatePostInput {
    title: String @rules(apply: ["required", "min:4"])
    content: String @rules(apply: ["email"])
}

input UpdatePostInput {
    id: ID!
    title: String @rules(apply: ["required", "min:4"])
}

type Subscription {
  postUpdated(author: ID): Post
}

extend type Mutation {
    createPost(input: CreatePostInput! @spread): Post! @create
    updatePost(input: UpdatePostInput! @spread): Post @update @broadcast(subscription: "postUpdated")
}