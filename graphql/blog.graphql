
extend type Query {
    allPosts: [Post!]! @all

    # ra-data-opencrud (try) (paginate error)
    # if i now add the Post fields to
    # /home/noud/workspace/lighthouse-tutorial/vendor/nuwave/lighthouse/src/Pagination/PaginationManipulator.php line 132
    # and a console message
    # issing translation for key: "Unknown resource Post. Make sure it has been declared on your server side schema. Known resources are User" 
    # i get an empty wrong result
    # posts: [Post!]! @paginate(model: "App\\Models\\Post")
    # postsConnection(aggregate: Int): [Post!]! @field(resolver: "App\\GraphQL\\Query@postsConnection")
    posts: [Post!]! @paginate(builder: "App\\Models\\Post@visiblePosts")

    # ra-data-opencrud (so far) (paginate error)
    posts: [Post!]! @all
    postsConnection: [Post!]! @all
    post(id: PostEdit @eq): Post @first
 
    # ra-data-graphql-simple (so far) (paginate error)
    # Post(id: PostInput! @eq): Post @find
    Post(id: Int): Post @first
    # allPosts: [Post!]! @all
    _allPostsMeta: ListMetadata @all  # fake

    # ra-data-graphql-simple (example)
    # allPosts(page: Int, perPage: Int): [Post]
    # allPostsMeta(page: Int, perPage: Int): ListMetadata

    # react apollo
    paginated_posts(first: Int!, page: Int, title: String): [Post!]! @paginate(model: "Post", scopes: ["title"])  # scopes: ["filterAndOrder"]
    single_post(id: PostInput @eq): Post @find
    authors: [User!]! @all(model: "App\\Models\\User")
}

# ra-data-graphql-simple (faking)
type ListMetadata {
    count: Int
}

# ra-data-opencrud (try fake)
type Aggregate {
    id: ID
    count: Int
}

type Post {
    id: ID!
    title: String!
    slug: String
    content: String
    coverImage: CoverImage @belongsTo
    author: User @belongsTo(relation: "user")
    comments: [Comment!]! @hasMany
    dateAndTime: String @rename(attribute: "updated_at")
    updated_at: DateTime
    aggregate: Aggregate    # ra-data-opencrud
}

type CoverImage {
    id: ID!
    handle: String!
}

type Comment{
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

# ar-data-graphql
input PostEdit {
    id: ID
    title: String
}

# ar-data-graphql
input PostInput {
    title: String
}

input CreateUserInput {
   name: String!
}

input  UpdateUserInput {
   name: String!
}

input CreateAuthorRelation {
    connect: ID
    create: CreateUserInput
    update: UpdateUserInput
}

input CreatePostInput {
    title: String!   # @rules(apply: ["required", "min:4"])
    content: String # @rules(apply: ["email"])
    author: CreateAuthorRelation
}

input UpdateAuthorRelation {
    connect: ID
    create: CreateUserInput
    update: UpdateUserInput
    disconnect: Boolean
    delete: Boolean
}

input UpdatePostInput {
    title: String @rules(apply: ["required", "min:4"])
    author: UpdateAuthorRelation
}

# type Subscription {
#   postUpdated(author: ID): Post
# }

extend type Mutation {
#   createPost(title: String!, content: String): Post! @create
    createPost(input: CreatePostInput! @spread): Post @create
    # updatePost(input: UpdatePostInput! @spread): Post @update @broadcast(subscription: "postUpdated")
  deletePost(id: ID!): Post @delete
}

#import blog.subscription.graphql