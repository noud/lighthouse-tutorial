"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    posts: [Post!]! @all
    post(id: Int! @eq): Post @find
    me: User @auth
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    user: User! @belongsTo
    comments: [Comment!]! @hasMany
}

type Comment{
    id: ID!
    reply: String!
    post: Post! @belongsTo
}

input CreateUserInput {
    name: String @rules(apply: ["required", "min:4"])
    email: String @rules(apply: ["email"])
#   email: String @rules(apply: ["unique:users,email"])
    password: String!
}

input CreatePostInput {
    title: String @rules(apply: ["required", "min:4"])
    content: String @rules(apply: ["email"])
}

input UpdatePostInput {
    id: ID!
    title: String @rules(apply: ["required", "min:4"])
}

type Subscription {
    postUpdated(user: ID): Post
}

type Mutation {
    createPost(
      input: CreatePostInput! @spread
  ): Post! @create
    updatePost(input: UpdatePostInput! @spread): Post @update @broadcast(subscription: "postUpdated")
#  createUser(name: String!, email: String!, password: String!): User! @create
#  createUser(
#    name: String @rules(apply: ["required", "min:4"])
#    email: String @rules(apply: ["email"])
#    password: String!
#  ): User! @create
  createUser(
      input: CreateUserInput! @spread
  ): User! @create
  updateUser(id: ID!, name: String): User @update
  deleteUser(id: ID!): User @delete
}
